// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define XXX &none
#define ___ &trans

#define BASE 0
#define NUM 1
#define SYM 2
#define UTIL 3

#define SK(KEY) &nk KEY KEY
#define MO(LAYER) &mo_tap LAYER F24

// Keep sticky keys active for a long time so they effectively do not time out
#define STICKY_KEY_TIMEOUT 60000

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
        nk: not_so_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            label = "NOT_SO_STICKY_KEY";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            quick-release;
            release-after-ms = <STICKY_KEY_TIMEOUT>;
        };
        // A hold-tap that activates without delay (like `&mo`)
        mo_tap: mo_with_tap {
          compatible = "zmk,behavior-hold-tap";
          label = "MO_WITH_TAP";
          #binding-cells = <2>;
          tapping_term_ms = <0>;
          retro-tap;
          flavor = "hold-preferred";
          bindings = <&mo>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
    macros {
        right_arrow: right_arrow {
            label = "ZM_right_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp MINUS &kp GT>
                ;
        };
    };
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
        };
        combo_eq {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp EQUAL>;
        };
        combo_right_arrow {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&right_arrow>;
        };
    };
    
    

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp W      &kp L      &kp Y      &kp P      &kp B          &kp Z      &kp F      &kp O      &kp U      &kp SQT
            &kp C       &kp R      &kp S       &kp T     &kp G          &kp M      &kp N       &kp E     &kp I       &kp A
            &kp Q      &kp J      &kp V      &kp D      &kp K          &kp X      &kp H      &kp FSLH  &kp COMMA    &kp DOT
                                             MO(NUM)   &kp SPACE     &kp LSHIFT  MO(SYM)
            >;
        };

        left_layer {
            bindings = <
        
                                 &kp LC(A)  &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET       &kp PLUS   &kp N7     &kp N8     &kp N9    &kp ASTRK
         
            &nk LCTRL LCTRL  &nk LALT LALT  &nk LCMD LCMD  &nk LSHFT LSHFT  &kp LC(F)       &kp EQUAL     &kp N0    &kp N1    &kp N2     &kp N3
      
                                &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LA(TAB)       &kp MINUS   &kp N4     &kp N5     &kp N6     &kp FSLH
        
                                                                    &trans     &trans       &trans     &trans
        
            >;
        };

        right_layer {
            bindings = <
        
            &kp GRAVE  &kp AMPS   &kp PIPE   &kp LBKT   &kp RBKT        &kp HOME  &kp PG_DN  &kp PG_UP   &kp END   &kp ESC
        
            &kp BSLH   &kp SEMI  &kp COLON   &kp LPAR   &kp RPAR         &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT   &kp ENTER
       
            &kp TILDE  &kp EXCL     &kp AT  &kp LBRC   &kp RBRC         &bt BT_CLR   &kp BSPC   &kp DEL    &kp TAB   &kp UNDER
       
                                             &trans     &trans         &trans     &trans
        
            >;
        };

        tri_layer {
            bindings = <
            &kp LC(A) &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &bootloader                &kp HOME  &kp PG_DN  &kp PG_UP   &kp END   &kp ESC
          &nk LCTRL LCTRL  &nk LALT LALT  &nk LCMD LCMD  &nk LSHFT LSHFT &kp LC(F)    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT   &kp ENTER
            &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V) &bt BT_SEL 0                   &bt BT_NXT   &kp BSPC   &kp DEL    &kp TAB   &kp UNDER
                                             &trans     &trans                        &trans     &trans
            >;
        };
    };
};
